class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& arr) {
        int n=arr.size();
        vector<int> adj[n+1];
        for(auto x:arr) {
            adj[x[0]].push_back(x[1]);
            adj[x[1]].push_back(x[0]);
        }
        vector<bool> vis(n+1,false);
        vector<int> list;
        vector<vector<int>> res;
        // vector<vector<int>> curr;
        for(int i=1;i<=n;i++) {
            if(!vis[i])
                if(solve(arr,adj,vis,i,-1,list,res))
                    break;
        }
        for(int i=n-1;i>=0;i--) {
            for(vector<int> temp:res) {
                if(arr[i][0]==temp[0] && arr[i][1]==temp[1])
                    return temp;
            }
        }
        return list;
    }
    
    bool solve(vector<vector<int>>& arr, vector<int> adj[], vector<bool>& vis,
               int u, int p, vector<int>& list, vector<vector<int>>& res) {
        vis[u]=true;
        list.push_back(u);
        for(int v:adj[u]) {
            if(!vis[v]) {
                if(solve(arr,adj,vis,v,u,list,res))
                    return true;
            } else if(v!=p) {
                vector<int> temp{min(u,v),max(u,v)};
                res.push_back(temp);
                int x=0;
                int y=0;
                int i=list.size()-1;
                while(i>0 && list[i]!=v) {
                    x=list[i];
                    y=list[i-1];
                    if(x>y) {
                        x=x+y;
                        y=x-y;
                        x=x-y;
                    }
                    vector<int> temp{x,y};
                    res.push_back(temp);
                    i--;
                }
                return true;
            }
        }
        list.pop_back();
        return false;
    }
};
